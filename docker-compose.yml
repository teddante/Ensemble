version: '3.8'

services:
  # Main Ensemble application
  ensemble:
    build:
      context: .
      target: production
    container_name: ensemble-app
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MODELS=${MODELS:-anthropic/claude-3-haiku-20240307,google/gemini-1.5-pro-latest,openai/gpt-4o-mini}
      - REFINEMENT_MODEL_NAME=${REFINEMENT_MODEL_NAME:-anthropic/claude-3-haiku-20240307}
      - PROMPT=${PROMPT:-}
    volumes:
      - ./output:/app/output
      - ./.env:/app/.env:ro
    restart: unless-stopped
    networks:
      - ensemble-network
    depends_on:
      - monitoring
    labels:
      - "com.ensemble.service=main"
      - "com.ensemble.version=1.0.0"

  # Development version with hot reload
  ensemble-dev:
    build:
      context: .
      target: development
    container_name: ensemble-dev
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MODELS=${MODELS:-anthropic/claude-3-haiku-20240307,google/gemini-1.5-pro-latest,openai/gpt-4o-mini}
      - REFINEMENT_MODEL_NAME=${REFINEMENT_MODEL_NAME:-anthropic/claude-3-haiku-20240307}
      - PROMPT=${PROMPT:-}
      - PYTHONPATH=/app/src
    volumes:
      - .:/app
      - ./output:/app/output
    ports:
      - "8000:8000"
    networks:
      - ensemble-network
    profiles:
      - dev
    labels:
      - "com.ensemble.service=development"

  # Monitoring and metrics collection
  monitoring:
    image: prom/prometheus:latest
    container_name: ensemble-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ensemble-network
    profiles:
      - monitoring
    labels:
      - "com.ensemble.service=monitoring"

  # Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ensemble-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ensemble-network
    depends_on:
      - monitoring
    profiles:
      - monitoring
    labels:
      - "com.ensemble.service=visualization"

  # Health check service
  health-check:
    build:
      context: .
      target: production
    container_name: ensemble-health
    command: ["python", "-c", "
      import asyncio;
      import json;
      import time;
      from src.health_check import run_health_check;
      
      async def continuous_health_check():
          while True:
              try:
                  result = await run_health_check();
                  print(json.dumps(result, indent=2, default=str));
                  await asyncio.sleep(60);
              except Exception as e:
                  print(f'Health check failed: {e}');
                  await asyncio.sleep(30);
      
      asyncio.run(continuous_health_check())
    "]
    volumes:
      - ./output:/app/output:ro
    networks:
      - ensemble-network
    profiles:
      - monitoring
    labels:
      - "com.ensemble.service=health"

  # Test runner
  test:
    build:
      context: .
      target: test
    container_name: ensemble-test
    volumes:
      - .:/app
    networks:
      - ensemble-network
    profiles:
      - test
    labels:
      - "com.ensemble.service=test"

networks:
  ensemble-network:
    driver: bridge
    labels:
      - "com.ensemble.network=main"

volumes:
  prometheus-data:
    labels:
      - "com.ensemble.volume=metrics"
  grafana-data:
    labels:
      - "com.ensemble.volume=visualization"