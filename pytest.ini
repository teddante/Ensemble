[tool:pytest]
# Pytest configuration for Ensemble AI

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=90
    --durations=10
    --maxfail=3

# Markers for test categorization
markers =
    unit: Unit tests for individual functions/classes
    integration: Integration tests for component interactions
    performance: Performance and load tests
    security: Security and validation tests
    slow: Tests that take more than 10 seconds
    network: Tests that require network access
    docker: Tests that require Docker
    api: Tests that require external API access
    error_handling: Tests for error handling functionality
    logging: Tests for logging functionality
    api_docs: Tests for API documentation

# Test filtering
# Run by marker: pytest -m "unit and not slow"
# Skip markers: pytest -m "not slow and not network"

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */virtualenv/*
    */__pycache__/*
    */site-packages/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml